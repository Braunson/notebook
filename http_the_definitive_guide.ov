HTTP, The Definitive Guide @link(http://oreilly.com/catalog/9781565925090)
================================================================================

# Overview
The Hypertext Transfer Protocol is used to communicate over the Web.  HTTP, The
Definitive Guide is an informative guide on this protocol.  The authors are very
knowledgeable about HTTP and have covered almost the entire specification (along
with additional HTTP-related information) in an easy to read format.

# HTTP: The Web's Foundation
## Overview of HTTP
Web browsers, servers, and other web apps all talk to each other via the
Hypertext Transfer Protocol.

HTTP uses reliable data-transmission protocols that guarantee that your data
will not be damaged or scrambled in transit.

{{ Servers }} store data, {{ clients }} send HTTP requests to servers.  Servers
return the requested data in HTTP responses.

Web servers host are said to host {{ resources }}, which can range from text
files, HTML files, images, movies, or even dynamic content.

HTTP tags each object being transported through the Web with a data format
called a {{ MIME type - Multipurpose Internet Mail Extensions }}.  It was
originally designed for emails, but it worked so well that HTTP adopted it.
When a client gets back an object with the MIME type, it will usually know
how to deal with it.

Example MIME types:
- text/html
- text/plain
- image/jpeg
- image/gif
- video/quicktime
- application/vnd.ms-powerpoint

A {{ URL - uniform resource locator }} describes a resource's location.  It
tells precisely where a resource is located and how to access it.  Most URLs
have 3 main parts:
- the scheme (http://)
- server's Internet address (www.joes-hardware.com or 192.168.1.1)
- path to specific resource on server (/specials/saw-blade.gif)

A URL is a kind of {{ URI - uniform resource identifier }}, which act like
the postal addresses of the Internet.  Another kind of URI is the
{{ URN - uniform resource name }}.  A URN is a unique name for a particular
piece of content, independent of where the resource currently resides.
For example:
  urn:ietf:rfc:2141

URNs are still experimental and not yet widely adopted.

An {{ HTTP transaction }} consists of a {{ request }} command and a 
{{ response }} result.  The communication happens with formatted blocks of data
called {{ HTTP messages }}.

There are different types of requests called {{ HTTP methods }}, which tells the
server what action to perform.  For example (incomplete):
- GET, send named resource form server to client
- PUT, store data from client into a named server resource
- DELETE, delete named resource from a server
- POST, send client data into a server gateway application
- HEAD, send just the HTTP headers from the response for the named resource

Every HTTP response comes back with a three-digit numeric {{ status code }} that
tells the client if the request succeeded or if other actions are required.
For example (incomplete):
- 200; OK. Document returned correctly
- 302; Redirect. Go someplace else to get the resource.
- 404; Not Found. Can't find this resource.

HTTP also sends a textual "reason phrase" with each numeric status code.  It's
included only for descriptive purposes.

HTTP messages are plain text, line-oriented messages.  Example request/response:

+---------------------------------+--------------------------+
| Request                         | Response                 |
+---------------------------------+--------------------------+
| GET /test/hi-there.txt HTTP/1.0 | HTTP/1.0 200 OK          |
| Accept: text/*                  | Content-Type: text/plain |
| Accept-Language: en,fr          | Content-length: 19       |
|                                 |                          |
|                                 | Hi!  I'm a message!      |
+---------------------------------+--------------------------+

Messages consist of 3 parts:
- {{ start line }}, first line of message indicating what to do 
  or what happened.
- {{ header fields }}, name/value pairs per line.
- {{ body }}, optionally following a blank line after the headers.
  Unlike the other parts, the body can contain arbitrary binary data.

Messages use {{ Transmission Control Protocol (TCP) }} connections to
move from place to place.  HTTP is an application layer protocol, it
leaves the details of networking to {{ TCP/IP }}.  TCP provides:
- error free data transportation
- in order delivery
- unsegmented data stream

HTTP is layered over TCP which is in turn layered of IP:
1. HTTP: application layer
2. TCP: transport layer
3. IP (Internet Protocol): network layer
4. Network-specific link interface: data link layer
5. Physical network hardware: physical layer

Before an HTTP client sends a message to the server it establishes a
TCP/IP connection using an IP address and port number.  Browsers usually
retrieve the IP address using a {{ hostname }}, example: www.netscape.com.
Hostnames are converted to IP addresses through the {{ Domain Name Service }}
or DNS.

The steps of a typical transaction are:
1. Browser extracts server's hostname from URL
2. Browser converts server's hostname into server's IP address
3. Browser extracts port number from URL (or defaults to 80)
4. Browser establishes TCP connection with web server
5. Browser sends an HTTP request to server
6. Server sends HTTP response back to browser
7. Connection is closed and browser displays the document

Some other architectural components of the web include:
- proxies: HTTP intermediaries that sit between clients/servers
- caches: HTTP storehouses that keep copies of pages close to clients
- gateways: special servers that connect to other applications
- tunnels: special proxies that blindly forward HTTP communications
- agents: semi-intelligence web clients that make automated requests

A {{ proxy }} sits between the client and server, receives all the client's HTTP
requests and relays it to the server (maybe modifying them).  They're often used
for security.  They can filter requests/responses; for example to detect viruses
or filter adult content.

{{ Caches }} are a special type of proxy server that keeps copies of popular
documents for performance reasons.  A client can download a document much more
quickly from a nearby cache than from a distant web server.

{{ Gateways }} are servers that act as intermediaries for other servers.  They
often convert HTTP traffic to another protocol.

{{ Tunnels }} are HTTP applications that blindly relay raw data between two
connections.  HTTP tunnels are often used to transport non-HTTP data over one
or more HTTP connections.  One popular example is to carry SSL encrypted traffic
through an HTTP connection.

{{ Agents }} are client programs that make HTTP requests on the user's behalf.
For example: web browsers are a kind of HTTP agent.

## URLs and Resources
### Syntax and URL components
### Shortcuts, relative URLs and expandomatic URLs
### Encoding and character rules
### Common schemes
### Future and URNs
## HTTP Messages
## Connection Management

# HTTP Architecture
## Web Servers
## Proxies
## Caching
## Integration Points: Gateways, Tunnels, and Relays
## Web Robots
## HTTP-NG

# Identification, Authorization, Security
## Client Identification and Cookies
## Basic Authentication
## Digest Authentication
## Secure HTTP

# Entities, Encodings, and Internationalization
## Entities and Encodings
## Internationalization
## Content Negotiation and Transcoding

# Content Publishing and Distribution
## Web Hosting
## Publishing Systems
## Redirection and Load Balancing
## Logging and Usage Tracking

